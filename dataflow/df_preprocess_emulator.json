{
	"name": "df_preprocess_emulator",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_intial_data",
						"type": "DatasetReference"
					},
					"name": "InitialData"
				},
				{
					"dataset": {
						"referenceName": "ds_bimbo_calendar",
						"type": "DatasetReference"
					},
					"name": "calendar"
				},
				{
					"dataset": {
						"referenceName": "ds_itinerary",
						"type": "DatasetReference"
					},
					"name": "itinerary"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pivotDevolutions",
						"type": "DatasetReference"
					},
					"name": "SinkPivotDevolutions"
				}
			],
			"transformations": [
				{
					"name": "FilterByParameters"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "FilterWeek"
				},
				{
					"name": "JoinItineraryWithCalendar"
				},
				{
					"name": "SelectVisitedClients"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "PivotDevolutions"
				},
				{
					"name": "JoinWithItinerary"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Fecha as date,",
				"          Agencia as string,",
				"          Agencia_Nombre as string,",
				"          Canal_Nombre as string,",
				"          Ruta as string,",
				"          Cliente as string,",
				"          Producto as string,",
				"          Producto_Nombre as string,",
				"          Precio as string,",
				"          Vida_Anaquel as string,",
				"          Venta_Piezas as long,",
				"          Venta_Neta_Comercial as double,",
				"          Cluster_Compra as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     modifiedAfter: (toTimestamp(1662681600000L)),",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> InitialData",
				"source(output(",
				"          Fecha as date,",
				"          sem as integer,",
				"          day as integer,",
				"          year as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> calendar",
				"source(output(",
				"          retailer_code as string,",
				"          retailer_name as string,",
				"          route_code as string,",
				"          sales_center_code as string,",
				"          sales_center_name as string,",
				"          xChannelDistribution as string,",
				"          dateVisitPlan as date,",
				"          dateVisitPlanName as string,",
				"          SemanaParNon as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> itinerary",
				"InitialData filter(lower(Canal_Nombre) == lower('Detalle') &&\r",
				"lower(Agencia_Nombre) == lower('Callao') &&\r",
				"in(['0500', '0515', '0528'], Ruta),",
				"     partitionBy('hash', 1)) ~> FilterByParameters",
				"FilterByParameters derive(uid = 'uid_' + Agencia + '_' + Ruta + '_' + Cliente + '_' + Producto,",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"calendar filter(year==2022 &&",
				"sem==34) ~> FilterWeek",
				"itinerary, FilterWeek join(dateVisitPlan == Fecha,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinItineraryWithCalendar",
				"JoinItineraryWithCalendar select(mapColumn(",
				"          retailer_code,",
				"          sem,",
				"          year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectVisitedClients",
				"JoinWithItinerary select(mapColumn(",
				"          Fecha,",
				"          Venta_Piezas,",
				"          uid",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns pivot(groupBy(uid),",
				"     pivotBy(Fecha),",
				"     {} = sum(Venta_Piezas),",
				"     columnNaming: '$N$V',",
				"     lateral: true,",
				"     partitionBy('hash', 1)) ~> PivotDevolutions",
				"derivedColumn1, SelectVisitedClients join(Cliente == retailer_code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithItinerary",
				"PivotDevolutions sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['pivot_devolutions_null.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkPivotDevolutions"
			]
		}
	}
}